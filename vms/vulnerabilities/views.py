# -*- coding:utf-8 -*-
from django.shortcuts import render
from django.http import HttpResponse,Http404
from vulnerabilities.models import Vulnerabilities
import logging
logging.basicConfig(level=logging.INFO,
                format='%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s',
                datefmt='%a, %d %b %Y %H:%M:%S',
                filename='myapp.log',
                filemode='w')
#def hello(request):
#    return HttpResponse("Hello World")
def hello(request):
    result = {'a':1}
    return render(request, 'vulnerabilities/show.html',{'dict':result})

def index(request):
    result = {'a':1}
    return render(request, 'vulnerabilities/index.html',{"dict":result})
#一个总览,显示标题，时间等重要信息，提供showDetail的链接
def showAll(request):
    #render的后端用列表实现即可
    result = [] 
    count = len(Vulnerabilities.objects.all())
    for i in range(count):
        result.append(Vulnerabilities.objects.all()[i].toDict())
        logging.info(result)
    return render(request, 'vulnerabilities/showAll.html',{'result':result,})

#显示漏洞细节 
def showDetail(request,id):
    id = int(id)
    tmpValue = Vulnerabilities.objects.get(pk=id).toDict()
    return render(request,'vulnerabilities/showDetail.html',{'tmpValue':tmpValue})
#    return HttpResponse(str(tmpValue))

#新增漏洞
def add(request):

    result = {}
    if request.POST:
    #for key in request.POST:
        logging.info(request.POST)
        logging.info(request.POST.get("event_type"))
        event_title = request.POST.get("event_title")
        find_time = request.POST.get("find_time")
        start_time = request.POST.get("start_time")
        finish_time = request.POST.get("finish_time")
        event_level = request.POST.get("event_level")

        event_type = request.POST.get("event_type")
        solve_time = request.POST.get("solve_time")
        resp_group = request.POST.get("resp_group")
        operater = request.POST.get("operater")

        finder = request.POST.get("finder")
        current_state = request.POST.get("current_state")
        event_rate = request.POST.get("current_state")
        phenomena = request.POST.get("phenomena") 
        
#        try:
        if True:
            tmpValue = Vulnerabilities(event_title=event_title,find_time=find_time,
                       start_time=start_time,finish_time=finish_time,event_level=event_level, \
                       event_type = event_type, solve_time=solve_time,resp_group=resp_group, \
                       operater=operater,phenomena=phenomena, finder=finder, \
                       current_state=current_state,event_rate=event_rate)       

            tmpValue.save()
#        except Exception as e:
            
            #logging.info(e)
            #return HttpResponse("error when saving!")
        return render(request, 'vulnerabilities/add_vulnerabilities.html',{"dict":result})
    else:
        return render(request, 'vulnerabilities/add_vulnerabilities.html',{"dict":result})

# Create your views here.

